<stack:stack>


<stack:description>
</stack:description>


<stack:package>stacki-ace-install</stack:package>
<stack:package>stacki-ace-images</stack:package>
<stack:package>stacki-ace-profile</stack:package>
<stack:package>stacki-ace-command</stack:package>

<stack:package>nfs-utils</stack:package>
<stack:package>dosfstools</stack:package>
<stack:package>ntp</stack:package>

<stack:package>lighttpd</stack:package>


<stack:script stack:stage="install-post">

<!-- time configuration -->

<stack:file stack:name="/etc/sysconfig/ntpd">
OPTIONS="-A -u ntp:ntp -p /var/run/ntpd.pid"
</stack:file>

<stack:file stack:name="/etc/ntp.conf">
server pool.ntp.org iburst
server 127.127.1.1 iburst
fudge 127.127.1.1 stratum 10
driftfile /var/lib/ntp/drift
</stack:file>

/usr/sbin/ntpdate -s -u pool.ntp.org

/usr/bin/systemctl enable ntpd
/usr/bin/systemctl start ntpd

<stack:file stack:name="/opt/stack/bin/stacki-time.sh" stack:perms="700">
#!/bin/sh
/usr/sbin/ntpdate -s -u pool.ntp.org
</stack:file>


<!-- configure the NFS server to accept v2 requests -->

<stack:file stack:name="/etc/sysconfig/nfs">
RPCNFSDARGS="-V 2"
RPCMOUNTDOPTS=""
STATDARG=""
SMNOTIFYARGS=""
RPCIDMAPDARGS=""
RPCGSSDARGS=""
GSS_USE_PROXY="yes"
RPCSVCGSSDARGS=""
BLKMAPDARGS=""
</stack:file>

<!-- clean up before the rsync -->

rm -rf /install

mkdir -p /export/nfs/install

<stack:file stack:name="/etc/exports">
/export/nfs/install &Kickstart_PrivateNetwork;/&Kickstart_PrivateNetmaskCIDR;(rw,sync,no_subtree_check,no_root_squash,insecure)
</stack:file>

rsync -xa --exclude /export / /export/nfs/install

rm /export/nfs/install/etc/fstab
rm /export/nfs/install/etc/hostname
rm /export/nfs/install/etc/sysconfig/network
rm /export/nfs/install/etc/sysconfig/network-scripts/ifcfg-eth*

<stack:file stack:name="/export/nfs/install/etc/sysconfig/network-scripts/ifcfg-eth0">
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
MTU=1500
</stack:file>

<stack:file stack:name="/export/nfs/install/tmp/stack.conf">
var.trackers = "&Kickstart_PrivateAddress;"
var.pkgservers = "&Kickstart_PrivateAddress;"
</stack:file>

cp /opt/stack/systemd/stacki-install.service /export/nfs/install/usr/lib/systemd/system/

echo "/usr/bin/systemctl enable stacki-install" > /export/nfs/install/tmp/systemctl.stacki
chmod a+x /export/nfs/install/tmp/systemctl.stacki

chroot /export/nfs/install /tmp/systemctl.stacki
</stack:script>


<stack:script stack:stage="install-post">
mkdir -p /tftpboot/pxelinux/
cp /opt/stack/images/armv7hl/* /tftpboot/pxelinux/

<stack:file stack:name="/tftpboot/pxelinux/cmdline.txt">
root=/dev/nfs nfsroot=&Kickstart_PrivateAddress;:/export/nfs/install rootwait ip=dhcp frontend=&Kickstart_PrivateAddress;
</stack:file>

<stack:file stack:name="/tftpboot/pxelinux/config.txt">
program_usb_boot_mode=1
program_usb_timeout=1
</stack:file>

</stack:script>

<stack:script stack:stage="install-post">
/usr/bin/systemctl enable nfs-server

/usr/sbin/exportfs -r

/usr/bin/systemctl start nfs-server
</stack:script>

<stack:script stack:stage="install-post">

<!-- default ACE backend node -->

/opt/stack/bin/stack add appliance ace longname=ACE
/opt/stack/bin/stack set appliance attr ace attr=managed value=true
/opt/stack/bin/stack set appliance attr ace attr=stackable value=yes
/opt/stack/bin/stack set appliance attr ace attr=node value=stacki-ace-backend

<!-- backend node used to build a generic CentOS image -->

/opt/stack/bin/stack add appliance ace-centos longname=ACE-CentOS 
/opt/stack/bin/stack set appliance attr ace-centos attr=managed value=true
/opt/stack/bin/stack set appliance attr ace-centos attr=stackable value=yes
/opt/stack/bin/stack set appliance attr ace-centos attr=node \
	value=stacki-ace-centos

/opt/stack/bin/stack add box ace-centos


<!-- default boot disk is the micro SD card -->

/opt/stack/bin/stack set attr attr=bootdisk value=mmcblk0

<!-- symbolic link to installation folder -->
mkdir -p /run/mnt/sysimage/install
ln -s /run/mnt/sysimage/install /export/nfs/install/install
rmdir /run/mnt/sysimage/install

sed -i 's/tmp/run/' /export/nfs/install/opt/lighttpd/conf/lighttpd.conf
sed -i 's/&Kickstart_PrivateAddress;/127.0.0.1/' /export/nfs/install/etc/yum.repos.d/stacki.repo

<!-- create boot image for ace-backends -->
dd if=/dev/zero of=/opt/stack/images/stacki-ace.img bs=20M count=1

parted /opt/stack/images/stacki-ace.img mklabel msdos
parted /opt/stack/images/stacki-ace.img mkpart primary fat16 1 100%

losetup --offset 1048576 --sizelimit 25690112 --show --find /opt/stack/images/stacki-ace.img /dev/loop0
mkfs -t vfat /dev/loop0
mount /dev/loop0 /media

cp /opt/stack/images/armv7hl/* /media
cp /tftpboot/pxelinux/cmdline.txt /media/
cp /tftpboot/pxelinux/config.txt /media/

umount /media
losetup -d /dev/loop0

<!-- disable stacki-install service on frontend -->
systemctl disable stacki-install
</stack:script>


</stack:stack> 
